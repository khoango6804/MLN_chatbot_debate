#!/usr/bin/env python3
"""
Script ki·ªÉm tra ƒë∆°n gi·∫£n cho h·ªá th·ªëng MLN Debate
Ch·ªâ test c√°c endpoints th·ª±c s·ª± c√≥ s·∫µn
"""

import requests
import json
import time
from datetime import datetime

# C·∫•u h√¨nh
BASE_URL = "http://localhost:5000"
TEST_TEAM_ID = f"SIMPLE_CHECK_{int(time.time())}"

def test_health():
    print("=" * 50)
    print("1. KI·ªÇM TRA HEALTH ENDPOINT")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BASE_URL}/api/health", timeout=5)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Backend kh·ªèe m·∫°nh!")
            print(f"   Status: {data.get('status')}")
            print(f"   Debate System Available: {data.get('debate_system_available')}")
            return True
        else:
            print(f"‚ùå C√≥ v·∫•n ƒë·ªÅ - Status: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def test_create_session():
    print("\n" + "=" * 50)
    print("2. T·∫†O SESSION M·ªöI")
    print("=" * 50)
    
    try:
        payload = {
            "course_code": "TEST_COURSE",
            "members": ["Test Student 1", "Test Student 2"],
            "team_id": TEST_TEAM_ID
        }
        
        response = requests.post(f"{BASE_URL}/api/debate/start", json=payload, timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ T·∫°o session th√†nh c√¥ng!")
            print(f"   Team ID: {data.get('team_id')}")
            print(f"   Topic: {data.get('topic', '')[:100]}...")
            print(f"   Stance: {data.get('stance')}")
            return True
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ t·∫°o session - Status: {response.status_code}")
            print(f"Response: {response.text[:200]}...")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def test_get_session_info():
    print("\n" + "=" * 50)
    print("3. KI·ªÇM TRA TH√îNG TIN SESSION")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/info", timeout=5)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ L·∫•y th√¥ng tin session th√†nh c√¥ng!")
            print(f"   Team ID: {data.get('team_id')}")
            print(f"   Topic: {data.get('topic', '')[:100]}...")
            print(f"   Members: {data.get('members')}")
            print(f"   Current Phase: {data.get('current_phase')}")
            print(f"   Stance: {data.get('stance')}")
            return True
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin - Status: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def test_phase1():
    print("\n" + "=" * 50)
    print("4. TEST PHASE 1")
    print("=" * 50)
    
    try:
        response = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/phase1", timeout=10)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Phase 1 th√†nh c√¥ng!")
            ai_args = data.get('data', {}).get('ai_arguments', [])
            print(f"   AI ƒë√£ t·∫°o {len(ai_args)} arguments:")
            for i, arg in enumerate(ai_args[:3], 1):  # Show first 3
                print(f"     {i}. {arg[:80]}...")
            return True
        else:
            print(f"‚ùå Phase 1 th·∫•t b·∫°i - Status: {response.status_code}")
            print(f"Response: {response.text[:200]}...")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def test_phase2_start():
    print("\n" + "=" * 50)
    print("5. TEST PHASE 2 START")
    print("=" * 50)
    
    try:
        # Submit team arguments first
        team_args = [
            "TEST_ARG_111111 - ƒê√¢y l√† lu·∫≠n ƒëi·ªÉm th·ª© nh·∫•t c·ªßa team ƒë·ªÉ test",
            "TEST_ARG_222222 - ƒê√¢y l√† lu·∫≠n ƒëi·ªÉm th·ª© hai c·ªßa team ƒë·ªÉ test",
            "TEST_ARG_333333 - ƒê√¢y l√† lu·∫≠n ƒëi·ªÉm th·ª© ba c·ªßa team ƒë·ªÉ test"
        ]
        
        payload = {"team_arguments": team_args}
        response = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/phase2", json=payload, timeout=10)
        print(f"Submit arguments - Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ G·ª≠i arguments th√†nh c√¥ng!")
            ai_questions = data.get('data', {}).get('ai_questions', [])
            print(f"   AI ƒë√£ t·∫°o {len(ai_questions)} questions:")
            for i, q in enumerate(ai_questions[:3], 1):
                print(f"     {i}. {q[:80]}...")
            
            # Now start Phase 2
            response2 = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/phase2/start", timeout=5)
            print(f"Start Phase 2 - Status Code: {response2.status_code}")
            
            if response2.status_code == 200:
                print(f"‚úÖ Phase 2 ƒë√£ b·∫Øt ƒë·∫ßu!")
                return True
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ start Phase 2 - Status: {response2.status_code}")
                return False
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ submit arguments - Status: {response.status_code}")
            print(f"Response: {response.text[:200]}...")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def test_phase2_qa():
    print("\n" + "=" * 50)
    print("6. TEST PHASE 2 Q&A")
    print("=" * 50)
    
    test_answers = [
        "ANSWER_TEST_111111 - ƒê√¢y l√† c√¢u tr·∫£ l·ªùi ƒë·∫ßu ti√™n trong Phase 2",
        "ANSWER_TEST_222222 - ƒê√¢y l√† c√¢u tr·∫£ l·ªùi th·ª© hai trong Phase 2",
        "ANSWER_TEST_333333 - ƒê√¢y l√† c√¢u tr·∫£ l·ªùi th·ª© ba trong Phase 2"
    ]
    
    try:
        for i, answer in enumerate(test_answers, 1):
            print(f"\n--- Tr·∫£ l·ªùi c√¢u h·ªèi {i} ---")
            
            # Answer AI question
            payload = {
                "answer": answer,
                "asker": "ai", 
                "question": f"Test question {i}"
            }
            response = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/ai-question/turn", 
                                   json=payload, timeout=10)
            print(f"Answer question {i} - Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ Tr·∫£ l·ªùi th√†nh c√¥ng!")
                turns = data.get('turns', [])
                print(f"   Total turns hi·ªán t·∫°i: {len(turns)}")
            else:
                print(f"   ‚ùå L·ªói khi tr·∫£ l·ªùi - Status: {response.status_code}")
                return False
            
            # Generate next question (except for last one)
            if i < len(test_answers):
                response2 = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/ai-question/generate", 
                                        timeout=10)
                print(f"Generate next question - Status: {response2.status_code}")
                
                if response2.status_code == 200:
                    data2 = response2.json()
                    new_q = data2.get('new_question', '')
                    print(f"   ‚úÖ T·∫°o c√¢u h·ªèi m·ªõi: {new_q[:60]}...")
                else:
                    print(f"   ‚ùå L·ªói t·∫°o c√¢u h·ªèi m·ªõi - Status: {response2.status_code}")
        
        print(f"\n‚úÖ Ho√†n th√†nh Phase 2 Q&A v·ªõi {len(test_answers)} c√¢u h·ªèi!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong Phase 2 Q&A: {e}")
        return False

def test_export():
    print("\n" + "=" * 50)
    print("7. TEST EXPORT FUNCTION")
    print("=" * 50)
    
    try:
        response = requests.get(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/export", timeout=15)
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            # Save export file
            filename = f"export_simple_check_{TEST_TEAM_ID}.docx"
            with open(filename, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ Export th√†nh c√¥ng!")
            print(f"   File saved: {filename}")
            print(f"   File size: {len(response.content)} bytes")
            
            # Check content type
            content_type = response.headers.get('content-type', '')
            if 'application/vnd.openxmlformats' in content_type:
                print(f"   ‚úÖ Content type ƒë√∫ng: DOCX")
            else:
                print(f"   ‚ö†Ô∏è  Content type: {content_type}")
            
            return True
        else:
            print(f"‚ùå Export th·∫•t b·∫°i - Status: {response.status_code}")
            print(f"Response: {response.text[:200]}...")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        return False

def main():
    print("üöÄ B·∫ÆT ƒê·∫¶U KI·ªÇM TRA ƒê∆†N GI·∫¢N MLN DEBATE SYSTEM")
    print(f"Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Test Team ID: {TEST_TEAM_ID}")
    
    tests = [
        ("Health Check", test_health),
        ("Create Session", test_create_session),
        ("Get Session Info", test_get_session_info),
        ("Phase 1", test_phase1),
        ("Phase 2 Start", test_phase2_start),
        ("Phase 2 Q&A", test_phase2_qa),
        ("Export Function", test_export)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"‚ùå L·ªói nghi√™m tr·ªçng trong {test_name}: {e}")
            results[test_name] = False
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 60)
    print("üìã T·ªîNG K·∫æT")
    print("=" * 60)
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status:10} {test_name}")
    
    print(f"\nüìä K·∫øt qu·∫£: {passed}/{total} tests th√†nh c√¥ng")
    
    if passed == total:
        print("üéâ T·∫§T C·∫¢ TESTS ƒê·ªÄU TH√ÄNH C√îNG!")
        print("üî• H·ªÜ TH·ªêNG HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG!")
    else:
        print("‚ö†Ô∏è  C√ì M·ªòT S·ªê TESTS TH·∫§T B·∫†I")
        print("\nüí° Khuy·∫øn ngh·ªã ki·ªÉm tra:")
        if not results.get("Health Check"):
            print("- Backend c√≥ th·ªÉ ch∆∞a kh·ªüi ƒë·ªông ho·∫∑c c√≥ l·ªói")
        if not results.get("Export Function"):
            print("- Export function c√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ data mixing")
        if not results.get("Phase 2 Q&A"):
            print("- Phase 2 logic c√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ")

if __name__ == "__main__":
    main() 