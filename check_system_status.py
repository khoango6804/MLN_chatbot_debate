#!/usr/bin/env python3
"""
Script ki·ªÉm tra to√†n di·ªán tr·∫°ng th√°i h·ªá th·ªëng MLN Debate
Ki·ªÉm tra:
1. Backend c√≥ ƒëang ch·∫°y kh√¥ng
2. Session hi·ªán t·∫°i trong memory
3. T·∫°o session test m·ªõi v√† ki·ªÉm tra export
4. X√°c minh logic Phase 2 v√† Phase 3
"""

import requests
import json
import time
from datetime import datetime

# C·∫•u h√¨nh
BASE_URL = "http://localhost:5000"
TEST_TEAM_ID = f"CHECK_SYSTEM_{int(time.time())}"

def check_backend_status():
    """Ki·ªÉm tra backend c√≥ ƒëang ch·∫°y kh√¥ng"""
    print("=" * 60)
    print("1. KI·ªÇM TRA BACKEND STATUS")
    print("=" * 60)
    
    try:
        response = requests.get(f"{BASE_URL}/api/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend ƒëang ch·∫°y b√¨nh th∆∞·ªùng")
            return True
        else:
            print(f"‚ùå Backend c√≥ v·∫•n ƒë·ªÅ - Status code: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi backend: {e}")
        return False

def check_active_sessions():
    """Ki·ªÉm tra c√°c session ƒëang active"""
    print("\n" + "=" * 60)
    print("2. KI·ªÇM TRA ACTIVE SESSIONS")
    print("=" * 60)
    
    try:
        response = requests.get(f"{BASE_URL}/api/debug/sessions")
        if response.status_code == 200:
            sessions = response.json()
            print(f"‚úÖ C√≥ {len(sessions)} session(s) ƒëang active:")
            for session_id, info in sessions.items():
                print(f"  - {session_id}: {info.get('turns', 0)} turns, Phase {info.get('phase', 'Unknown')}")
            return sessions
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin sessions - Status: {response.status_code}")
            return {}
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra sessions: {e}")
        return {}

def create_test_session():
    """T·∫°o session test m·ªõi"""
    print("\n" + "=" * 60)
    print("3. T·∫†O SESSION TEST M·ªöI")
    print("=" * 60)
    
    try:
        # T·∫°o session m·ªõi
        response = requests.post(f"{BASE_URL}/api/session", json={
            "team_id": TEST_TEAM_ID,
            "student_name": "Test Student",
            "topic": "Test Topic - Ki·ªÉm tra h·ªá th·ªëng"
        })
        
        if response.status_code == 200:
            print(f"‚úÖ T·∫°o session m·ªõi th√†nh c√¥ng: {TEST_TEAM_ID}")
            return True
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ t·∫°o session - Status: {response.status_code}")
            print(f"Response: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o session: {e}")
        return False

def test_phase2_flow():
    """Test Phase 2 flow ho√†n ch·ªânh"""
    print("\n" + "=" * 60)
    print("4. TEST PHASE 2 FLOW")
    print("=" * 60)
    
    answers = [
        "ANSWER_1_111111111 - ƒê√¢y l√† c√¢u tr·∫£ l·ªùi ƒë·∫ßu ti√™n ƒë·ªÉ test",
        "ANSWER_2_222222222 - ƒê√¢y l√† c√¢u tr·∫£ l·ªùi th·ª© hai ƒë·ªÉ test", 
        "ANSWER_3_333333333 - ƒê√¢y l√† c√¢u tr·∫£ l·ªùi th·ª© ba ƒë·ªÉ test"
    ]
    
    try:
        # B·∫Øt ƒë·∫ßu Phase 2
        response = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/start-phase2")
        if response.status_code != 200:
            print(f"‚ùå Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu Phase 2 - Status: {response.status_code}")
            return False
        
        print("‚úÖ B·∫Øt ƒë·∫ßu Phase 2 th√†nh c√¥ng")
        
        # Tr·∫£ l·ªùi 3 c√¢u h·ªèi AI
        for i, answer in enumerate(answers, 1):
            print(f"\n--- Tr·∫£ l·ªùi c√¢u h·ªèi {i} ---")
            
            response = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/ai-question-turn", 
                                   json={"answer": answer})
            
            if response.status_code == 200:
                print(f"‚úÖ Tr·∫£ l·ªùi c√¢u {i} th√†nh c√¥ng")
                result = response.json()
                print(f"  Turn count sau khi tr·∫£ l·ªùi: {result.get('turn_count', 'Unknown')}")
            else:
                print(f"‚ùå L·ªói khi tr·∫£ l·ªùi c√¢u {i} - Status: {response.status_code}")
                return False
                
            # T·∫°o c√¢u h·ªèi ti·∫øp theo (tr·ª´ c√¢u cu·ªëi)
            if i < len(answers):
                response = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/ai-question/generate")
                if response.status_code == 200:
                    print(f"‚úÖ T·∫°o c√¢u h·ªèi {i+1} th√†nh c√¥ng")
                else:
                    print(f"‚ùå L·ªói khi t·∫°o c√¢u h·ªèi {i+1}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong Phase 2 flow: {e}")
        return False

def test_phase3_flow():
    """Test Phase 3 flow"""
    print("\n" + "=" * 60)
    print("5. TEST PHASE 3 FLOW")
    print("=" * 60)
    
    try:
        # B·∫Øt ƒë·∫ßu Phase 3
        response = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/start-phase3")
        if response.status_code != 200:
            print(f"‚ùå Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu Phase 3 - Status: {response.status_code}")
            return False
            
        print("‚úÖ B·∫Øt ƒë·∫ßu Phase 3 th√†nh c√¥ng")
        
        # Th√™m m·ªôt v√†i turns cho Phase 3
        phase3_data = [
            {"role": "student", "content": "STUDENT_PHASE3_111 - Student answer in phase 3"},
            {"role": "ai", "content": "AI_PHASE3_222 - AI response in phase 3"},
            {"role": "student", "content": "STUDENT_PHASE3_333 - Final student response"}
        ]
        
        for turn_data in phase3_data:
            response = requests.post(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/add-turn", 
                                   json=turn_data)
            if response.status_code == 200:
                print(f"‚úÖ Th√™m turn Phase 3 th√†nh c√¥ng: {turn_data['role']}")
            else:
                print(f"‚ùå L·ªói khi th√™m turn Phase 3: {turn_data['role']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói trong Phase 3 flow: {e}")
        return False

def test_export_function():
    """Test export function"""
    print("\n" + "=" * 60)
    print("6. TEST EXPORT FUNCTION")
    print("=" * 60)
    
    try:
        response = requests.get(f"{BASE_URL}/api/debate/{TEST_TEAM_ID}/export")
        if response.status_code == 200:
            print("‚úÖ Export th√†nh c√¥ng - ƒêang ph√¢n t√≠ch n·ªôi dung...")
            
            # L∆∞u file export
            filename = f"export_check_{TEST_TEAM_ID}.docx"
            with open(filename, 'wb') as f:
                f.write(response.content)
            print(f"‚úÖ ƒê√£ l∆∞u file export: {filename}")
            
            # Ki·ªÉm tra header ƒë·ªÉ x√°c nh·∫≠n l√† file Word
            if response.headers.get('content-type') == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
                print("‚úÖ File export c√≥ ƒë·ªãnh d·∫°ng DOCX ƒë√∫ng")
            else:
                print("‚ö†Ô∏è  File export c√≥ th·ªÉ kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng DOCX")
                
            return True
        else:
            print(f"‚ùå Export th·∫•t b·∫°i - Status: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi export: {e}")
        return False

def check_session_data_structure():
    """Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu session"""
    print("\n" + "=" * 60)
    print("7. KI·ªÇM TRA C·∫§U TR√öC D·ªÆ LI·ªÜU SESSION")
    print("=" * 60)
    
    try:
        response = requests.get(f"{BASE_URL}/api/debug/session/{TEST_TEAM_ID}")
        if response.status_code == 200:
            session_data = response.json()
            print("‚úÖ L·∫•y th√¥ng tin session th√†nh c√¥ng")
            
            # Ki·ªÉm tra Phase 2 data
            phase2_turns = session_data.get('turns', [])
            print(f"\nüìä PHASE 2 DATA ({len(phase2_turns)} turns):")
            for i, turn in enumerate(phase2_turns):
                role = turn.get('role', 'Unknown')
                content_preview = turn.get('content', '')[:50] + "..." if len(turn.get('content', '')) > 50 else turn.get('content', '')
                print(f"  Turn {i+1}: {role} - {content_preview}")
            
            # Ki·ªÉm tra Phase 3 data
            phase3_turns = session_data.get('phase3_turns', [])
            print(f"\nüìä PHASE 3 DATA ({len(phase3_turns)} turns):")
            for i, turn in enumerate(phase3_turns):
                role = turn.get('role', 'Unknown')
                content_preview = turn.get('content', '')[:50] + "..." if len(turn.get('content', '')) > 50 else turn.get('content', '')
                print(f"  Turn {i+1}: {role} - {content_preview}")
            
            # Ki·ªÉm tra c√°c pattern test
            print("\nüîç T√åM KI·∫æM C√ÅC PATTERN TEST:")
            all_content = ""
            for turn in phase2_turns + phase3_turns:
                all_content += turn.get('content', '') + " "
            
            patterns = ["111111", "222222", "333333"]
            for pattern in patterns:
                if pattern in all_content:
                    print(f"  ‚úÖ T√¨m th·∫•y pattern {pattern}")
                else:
                    print(f"  ‚ùå Kh√¥ng t√¨m th·∫•y pattern {pattern}")
            
            return True
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin session - Status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra session data: {e}")
        return False

def cleanup_test_session():
    """D·ªçn d·∫πp session test"""
    print("\n" + "=" * 60)
    print("8. D·ªåN D·∫∏P SESSION TEST")
    print("=" * 60)
    
    try:
        response = requests.delete(f"{BASE_URL}/api/debug/session/{TEST_TEAM_ID}")
        if response.status_code == 200:
            print("‚úÖ ƒê√£ x√≥a session test th√†nh c√¥ng")
        else:
            print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ x√≥a session test - Status: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è  L·ªói khi x√≥a session test: {e}")

def main():
    """Ch·∫°y t·∫•t c·∫£ c√°c ki·ªÉm tra"""
    print("üöÄ B·∫ÆT ƒê·∫¶U KI·ªÇM TRA H·ªÜ TH·ªêNG MLN DEBATE")
    print(f"Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Test Session ID: {TEST_TEAM_ID}")
    
    # Danh s√°ch c√°c b∆∞·ªõc ki·ªÉm tra
    checks = [
        ("Backend Status", check_backend_status),
        ("Active Sessions", check_active_sessions),
        ("Create Test Session", create_test_session),
        ("Phase 2 Flow", test_phase2_flow),
        ("Phase 3 Flow", test_phase3_flow),
        ("Export Function", test_export_function),
        ("Session Data Structure", check_session_data_structure)
    ]
    
    results = {}
    
    # Ch·∫°y t·ª´ng b∆∞·ªõc ki·ªÉm tra
    for check_name, check_func in checks:
        try:
            result = check_func()
            results[check_name] = result
        except Exception as e:
            print(f"‚ùå L·ªói nghi√™m tr·ªçng trong {check_name}: {e}")
            results[check_name] = False
    
    # D·ªçn d·∫πp
    cleanup_test_session()
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 60)
    print("üìã T·ªîNG K·∫æT K·∫æT QU·∫¢ KI·ªÇM TRA")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for check_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status:10} {check_name}")
        if result:
            passed += 1
    
    print(f"\nüìä T·ªïng k·∫øt: {passed}/{total} ki·ªÉm tra th√†nh c√¥ng")
    
    if passed == total:
        print("üéâ T·∫§T C·∫¢ KI·ªÇM TRA ƒê·ªÄU TH√ÄNH C√îNG! H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.")
    else:
        print("‚ö†Ô∏è  C√ì M·ªòT S·ªê V·∫§N ƒê·ªÄ C·∫¶N ƒê∆Ø·ª¢C KH·∫ÆC PH·ª§C!")
        print("\nüí° Khuy·∫øn ngh·ªã:")
        if not results.get("Backend Status"):
            print("- Ki·ªÉm tra v√† kh·ªüi ƒë·ªông l·∫°i backend")
        if not results.get("Export Function"):
            print("- Ki·ªÉm tra logic export function trong backend/main.py")
        if not results.get("Phase 2 Flow") or not results.get("Phase 3 Flow"):
            print("- Ki·ªÉm tra logic Phase 2/3 trong backend")

if __name__ == "__main__":
    main() 